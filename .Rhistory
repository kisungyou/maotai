# use my function
fit_weights <- out_movMF$alpha
fit_means   <- out_movMF$theta/sqrt(rowSums(out_movMF$theta^2))
fit_concentrations <- base::rowSums(out_movMF$theta)
clust_mine <- movMF_info(X, fit_means, fit_concentration, fit_weights)$clustering
# simple example
# data matrix normalized
X = as.matrix(iris[,2:4])
X = as.matrix(scale(X, center=TRUE, scale=FALSE))
X = X/sqrt(rowSums(X^2))
# fit the model with movMF package
out_movMF <- movMF::movMF(X, 3)
clust_movMF <- predict(out_movMF, X)
# use my function
fit_weights <- out_movMF$alpha
fit_means   <- out_movMF$theta/sqrt(rowSums(out_movMF$theta^2))
fit_concentrations <- base::rowSums(out_movMF$theta)
clust_mine <- movMF_info(X, fit_means, fit_concentration, fit_weights)$clustering
# simple example
# data matrix normalized
X = as.matrix(iris[,2:4])
X = as.matrix(scale(X, center=TRUE, scale=FALSE))
X = X/sqrt(rowSums(X^2))
# fit the model with movMF package
out_movMF <- movMF::movMF(X, 3)
clust_movMF <- predict(out_movMF, X)
# use my function
fit_weights <- out_movMF$alpha
fit_means   <- out_movMF$theta/sqrt(rowSums(out_movMF$theta^2))
fit_concentrations <- base::rowSums(out_movMF$theta)
clust_mine <- movMF_info(X, fit_means, fit_concentration, fit_weights)$clustering
clust_mine <- movMF_info(X, fit_means, fit_concentrations, fit_weights)$clustering
# simple example
# data matrix normalized
X = as.matrix(iris[,2:4])
X = as.matrix(scale(X, center=TRUE, scale=FALSE))
X = X/sqrt(rowSums(X^2))
# fit the model with movMF package
out_movMF <- movMF::movMF(X, 3)
clust_movMF <- predict(out_movMF, X)
# use my function
fit_weights <- out_movMF$alpha
fit_means   <- out_movMF$theta/sqrt(rowSums(out_movMF$theta^2))
fit_concentrations <- base::rowSums(out_movMF$theta)
clust_mine <- movMF_info(X, fit_means, fit_concentrations, fit_weights)$clustering
help(besselI)
# simple example
# data matrix normalized
X = as.matrix(iris[,2:4])
X = as.matrix(scale(X, center=TRUE, scale=FALSE))
X = X/sqrt(rowSums(X^2))
# fit the model with movMF package
out_movMF <- movMF::movMF(X, 3)
clust_movMF <- predict(out_movMF, X)
# use my function
fit_weights <- out_movMF$alpha
fit_means   <- out_movMF$theta/sqrt(rowSums(out_movMF$theta^2))
fit_concentrations <- base::rowSums(out_movMF$theta)
clust_mine <- movMF_info(X, fit_means, fit_concentrations, fit_weights)$clustering
fit_concentrations
# use my function
fit_weights <- out_movMF$alpha
fit_means   <- out_movMF$theta/sqrt(rowSums(out_movMF$theta^2))
fit_concentrations <- sqrt(rowSums(fit$theta^2))
clust_mine <- movMF_info(X, fit_means, fit_concentrations, fit_weights)$clustering
fit_concentrations <- sqrt(rowSums(fit$theta^2))
# use my function
fit_weights <- out_movMF$alpha
fit_means   <- out_movMF$theta/sqrt(rowSums(out_movMF$theta^2))
fit_concentrations <- sqrt(rowSums(out_movMF$theta^2))
clust_mine <- movMF_info(X, fit_means, fit_concentrations, fit_weights)$clustering
clust_mine
clust_movMF
fit_concentrations
# visualize by PCA
X2d = X%*%eigen(cov(X))$vectors[,1:2]
X2d = X2d/sqrt(rowSums(X^2))
plot(X2d, col=clust_min)
# visualize by PCA
X2d = X%*%eigen(cov(X))$vectors[,1:2]
X2d = X2d/sqrt(rowSums(X^2))
plot(X2d, col=clust_mine)
# simple example
# data matrix normalized
X = as.matrix(iris[,2:4])
X = as.matrix(scale(X, center=TRUE, scale=FALSE))
X = X%*%eigen(cov(X))$vectors[,1:2] # apply PCA
X = X/sqrt(rowSums(X^2))
plot(X)
# simple example
# data matrix normalized
X = as.matrix(iris[,2:4])
X = as.matrix(scale(X, center=TRUE, scale=FALSE))
X = X%*%eigen(cov(X))$vectors[,1:2] # apply PCA
X = X/sqrt(rowSums(X^2))
# fit the model with movMF package
big_movMF <- movMF::movMF(X, 10)
clust_big_movMF <- predict(big_movMF, X)
big_means <- big_movMF$theta/sqrt(rowSums(big_movMF$theta^2))
big_weights <- big_movMF$alpha
big_concentrations <- sqrt(rowSums(big_movMF$theta^2))
# reduce to 3 components using different methods
red_hclust <- reduce_movMF_partitional(big_means, big_concentrations, big_weights, target.num=3, method="hclust")
red_medoid <- reduce_movMF_partitional(big_means, big_concentrations, big_weights, target.num=3, method="kmedoids")
# simple example
# data matrix normalized
X = as.matrix(iris[,2:4])
X = as.matrix(scale(X, center=TRUE, scale=FALSE))
X = X%*%eigen(cov(X))$vectors[,1:2] # apply PCA
X = X/sqrt(rowSums(X^2))
# fit the model with movMF package
big_movMF <- movMF::movMF(X, 10)
clust_big_movMF <- predict(big_movMF, X)
big_means <- big_movMF$theta/sqrt(rowSums(big_movMF$theta^2))
big_weights <- big_movMF$alpha
big_concentrations <- sqrt(rowSums(big_movMF$theta^2))
# reduce to 3 components using different methods
red_hclust <- reduce_movMF_partitional(big_means, big_concentrations, big_weights, target.num=3, method="hclust")
# simple example
# data matrix normalized
X = as.matrix(iris[,2:4])
X = as.matrix(scale(X, center=TRUE, scale=FALSE))
X = X%*%eigen(cov(X))$vectors[,1:2] # apply PCA
X = X/sqrt(rowSums(X^2))
# fit the model with movMF package
big_movMF <- movMF::movMF(X, 10)
clust_big_movMF <- predict(big_movMF, X)
big_means <- big_movMF$theta/sqrt(rowSums(big_movMF$theta^2))
big_weights <- big_movMF$alpha
big_concentrations <- sqrt(rowSums(big_movMF$theta^2))
# reduce to 3 components using different methods
red_hclust <- reduce_movMF_partitional(big_means, big_concentrations, big_weights, target.num=3, method="hclust")
rm(list=ls())
graphics.off()
# simple example
# data matrix normalized
X = as.matrix(iris[,2:4])
X = as.matrix(scale(X, center=TRUE, scale=FALSE))
X = X%*%eigen(cov(X))$vectors[,1:2] # apply PCA
X = X/sqrt(rowSums(X^2))
# fit the model with movMF package
big_movMF <- movMF::movMF(X, 10)
clust_big_movMF <- predict(big_movMF, X)
big_means <- big_movMF$theta/sqrt(rowSums(big_movMF$theta^2))
big_weights <- big_movMF$alpha
big_concentrations <- sqrt(rowSums(big_movMF$theta^2))
# reduce to 3 components using different methods
red_hclust <- reduce_movMF_partitional(big_means, big_concentrations, big_weights, target.num=3, method="hclust")
# simple example
# data matrix normalized
X = as.matrix(iris[,2:4])
X = as.matrix(scale(X, center=TRUE, scale=FALSE))
X = X%*%eigen(cov(X))$vectors[,1:2] # apply PCA
X = X/sqrt(rowSums(X^2))
# fit the model with movMF package
big_movMF <- movMF::movMF(X, 10)
clust_big_movMF <- predict(big_movMF, X)
big_means <- big_movMF$theta/sqrt(rowSums(big_movMF$theta^2))
big_weights <- big_movMF$alpha
big_concentrations <- sqrt(rowSums(big_movMF$theta^2))
# reduce to 3 components using different methods
red_hclust <- reduce_movMF_partitional(big_means, big_concentrations, big_weights, target.num=3, method="hclust")
# simple example
# data matrix normalized
X = as.matrix(iris[,2:4])
X = as.matrix(scale(X, center=TRUE, scale=FALSE))
X = X%*%eigen(cov(X))$vectors[,1:2] # apply PCA
X = X/sqrt(rowSums(X^2))
# fit the model with movMF package
big_movMF <- movMF::movMF(X, 10)
clust_big_movMF <- predict(big_movMF, X)
big_means <- big_movMF$theta/sqrt(rowSums(big_movMF$theta^2))
big_weights <- big_movMF$alpha
big_concentrations <- sqrt(rowSums(big_movMF$theta^2))
# reduce to 3 components using different methods
red_hclust <- reduce_movMF_partitional(big_means, big_concentrations, big_weights, target.num=3, method="hclust")
red_medoid <- reduce_movMF_partitional(big_means, big_concentrations, big_weights, target.num=3, method="kmedoids")
red_hclust
clust_hclust <- movMF_info(X, red_hclust$means, red_hclust$concentrations, red_hclust$weights)$clustering
# visualize
par(mfrow=c(1,3), pty="s")
clust_hclust <- movMF_info(X, red_hclust$means, red_hclust$concentrations, red_hclust$weights)$clustering
clust_medoid <- movMF_info(X, red_medoid$means, red_medoid$concentrations, red_medoid$weights)$clustering
# visualize
par(mfrow=c(1,3), pty="s")
plot(X, col=clust_big_movMF, pch=19, main="Original")
plot(X, col=clust_hclust, pch=19, main="Reduced (hclust)")
plot(X, col=clust_medoid, pch=19, main="Reduced (kmedoids)")
clust_hclust
clust_medoid
rm(list=ls())
graphics.off()
# simple example
# data matrix normalized
X = as.matrix(iris[,2:4])
X = as.matrix(scale(X, center=TRUE, scale=FALSE))
X = X%*%eigen(cov(X))$vectors[,1:2] # apply PCA
X = X/sqrt(rowSums(X^2))
# fit the model with movMF package
big_movMF <- movMF::movMF(X, 10)
clust_big_movMF <- predict(big_movMF, X)
convert_movMF <- movMF_convert(big_movMF)
big_means <- convert_movMF$means
big_weights <- convert_movMF$weights
big_concentrations <- convert_movMF$concentrations
# reduce to 3 components using different methods
red_hclust <- movMF_reduce_partitional(big_means, big_concentrations, big_weights, target.num=3, method="hclust")
red_medoid <- movMF_reduce_partitional(big_means, big_concentrations, big_weights, target.num=3, method="kmedoids")
clust_hclust <- movMF_info(X, red_hclust$means, red_hclust$concentrations, red_hclust$weights)$clustering
clust_medoid <- movMF_info(X, red_medoid$means, red_medoid$concentrations, red_medoid$weights)$clustering
# visualize
par(mfrow=c(1,3), pty="s")
plot(X, col=clust_big_movMF, pch=19, main="Original")
plot(X, col=clust_hclust, pch=19, main="Reduced (hclust)")
plot(X, col=clust_medoid, pch=19, main="Reduced (kmedoids)")
graphics.off()
# setup -------------------------------------------------------------------
rm(list=ls())
library(pacman)
pacman::p_load(rstudioapi,
ggplot2,
cowplot,
scales,
readr,
dplyr,
reshape2,
R.matlab,
ggthemes,
maotai,
movMF,
vMF,
viridisLite)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("../auxiliary.R")
# data-generating process -------------------------------------------------
# 4 equidistant locations
vec_mu = c(0, pi/2, pi, 3*pi/2)
small_kappa = 5
large_kappa = 50
mat_mu = array(0,c(length(vec_mu),2))
for (i in 1:length(vec_mu)){
now_mu = vec_mu[i]
mat_mu[i,1] = cos(now_mu)
mat_mu[i,2] = sin(now_mu)
}
# randomly generate: east and west are high kappa, north and south are small kappa
n_per_group = 100
pts_north = vMF::rvMF(n_per_group, mat_mu[1,]*small_kappa)
pts_east  = vMF::rvMF(n_per_group, mat_mu[2,]*large_kappa)
pts_south = vMF::rvMF(n_per_group, mat_mu[3,]*small_kappa)
pts_west  = vMF::rvMF(n_per_group, mat_mu[4,]*large_kappa)
pts_all   = rbind(pts_north, pts_east, pts_south, pts_west)
# test draw the distribution ----------------------------------------------
# draw the exact distributions
grid_angle  = seq(from=0, to=2*pi, length.out=1000)
wow_density = aux_density2_mix(grid_angle, mat_mu, c(small_kappa, large_kappa, small_kappa, large_kappa))
pts_density = wow_density$coords
max_density = wow_density$whichK
par(pty="s", mfrow=c(1,2))
# density
plot(pts_density[,1], pts_density[,2], type="l", lwd=2, asp=1)
lines(cos(grid_angle), sin(grid_angle))
# points
plot(pts_density[,1], pts_density[,2], type="l", lwd=2, asp=1, col="#0000FF00")
lines(cos(grid_angle), sin(grid_angle))
points(pts_all[,1], pts_all[,2], pch=21, col=rep(1:4, each=n_per_group), cex=1)
# fit ---------------------------------------------------------------------
# four options
#   - exact         : fit movMF from K=2 to K=10
#   - reduce_greedy : fit movMF with K=10 and greedy reduction
#   - reduce_hclust : fit movMF with K=10 and hclust reduction (partitional)
#   - reduce_kmedoids : fit movMF with K=10 and kmedoids reduction (partitional)
# filename to save or load
file_name = "computed_fits.RData"
if (file.exists(file_name)){
load(file_name)
} else{
# empty vector of list to save computed outputs
fits_exact  = vector("list", length=9)
fits_greedy = vector("list", length=9)
fits_hclust = vector("list", length=9)
fits_kmedoids = vector("list", length=9)
# fit exact
for (i in 1:9){
fits_exact[[i]] = aux_movMF_exact(pts_all, K=(i+1))
}
# fit others
fits_greedy[[9]] <- fits_hclust[[9]] <- fits_kmedoids[[9]] <- fits_exact[[9]]
for (i in 1:8){
fits_greedy[[i]] = aux_movMF_reduce(pts_all, big.K = 10, small.K = i+1,use.greedy=TRUE)
fits_hclust[[i]] = aux_movMF_reduce(pts_all, big.K = 10, small.K = i+1, use.greedy = FALSE, use.hclust = TRUE)
fits_kmedoids[[i]] = aux_movMF_reduce(pts_all, big.K = 10, small.K = i+1, use.greedy = FALSE, use.hclust = FALSE)
}
save(fits_exact, fits_greedy, fits_hclust, fits_kmedoids, file="computed_fits.RData")
}
# extract BIC values
vals_BIC <- array(0,c(9,4))
for (i in 1:9){
vals_BIC[i,1] <- fits_exact[[i]]$BIC
vals_BIC[i,2] <- fits_greedy[[i]]$BIC
vals_BIC[i,3] <- fits_hclust[[i]]$BIC
vals_BIC[i,4] <- fits_kmedoids[[i]]$BIC
}
now_idx = 9
graphics.off()
x11()
par(mfrow=c(1,4), pty="s")
plot(pts_all, col=fits_exact[[now_idx]]$cluster, pch=19, cex=0.5, asp=1, main=paste0("Exact:K=",now_idx+1))
plot(pts_all, col=fits_greedy[[now_idx]]$cluster, pch=19, cex=0.5, asp=1,  main=paste0("Greedy:K=",now_idx+1))
plot(pts_all, col=fits_hclust[[now_idx]]$cluster, pch=19, cex=0.5, asp=1,  main=paste0("Hclust:K=",now_idx+1))
plot(pts_all, col=fits_kmedoids[[now_idx]]$cluster, pch=19, cex=0.5, asp=1,  main=paste0("Kmedoids:K=",now_idx+1))
x11()
matplot(vals_BIC)
# UNBELIEVABLY POOR RESULTS; NEED TO CONSULT WEIGHTED VERSION OF K-MEDOIDS
remove.packages("maotai")
install_github("kisungyou/maotai")
devtools::install_github("kisungyou/maotai")
# setup -------------------------------------------------------------------
rm(list=ls())
library(pacman)
pacman::p_load(rstudioapi,
ggplot2,
cowplot,
scales,
readr,
dplyr,
reshape2,
R.matlab,
ggthemes,
maotai,
movMF,
vMF,
viridisLite)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("../auxiliary.R")
# data-generating process -------------------------------------------------
# 4 equidistant locations
vec_mu = c(0, pi/2, pi, 3*pi/2)
small_kappa = 5
large_kappa = 50
mat_mu = array(0,c(length(vec_mu),2))
for (i in 1:length(vec_mu)){
now_mu = vec_mu[i]
mat_mu[i,1] = cos(now_mu)
mat_mu[i,2] = sin(now_mu)
}
# randomly generate: east and west are high kappa, north and south are small kappa
n_per_group = 100
pts_north = vMF::rvMF(n_per_group, mat_mu[1,]*small_kappa)
pts_east  = vMF::rvMF(n_per_group, mat_mu[2,]*large_kappa)
pts_south = vMF::rvMF(n_per_group, mat_mu[3,]*small_kappa)
pts_west  = vMF::rvMF(n_per_group, mat_mu[4,]*large_kappa)
pts_all   = rbind(pts_north, pts_east, pts_south, pts_west)
# test draw the distribution ----------------------------------------------
# draw the exact distributions
grid_angle  = seq(from=0, to=2*pi, length.out=1000)
wow_density = aux_density2_mix(grid_angle, mat_mu, c(small_kappa, large_kappa, small_kappa, large_kappa))
pts_density = wow_density$coords
max_density = wow_density$whichK
par(pty="s", mfrow=c(1,2))
# density
plot(pts_density[,1], pts_density[,2], type="l", lwd=2, asp=1)
lines(cos(grid_angle), sin(grid_angle))
# points
plot(pts_density[,1], pts_density[,2], type="l", lwd=2, asp=1, col="#0000FF00")
lines(cos(grid_angle), sin(grid_angle))
points(pts_all[,1], pts_all[,2], pch=21, col=rep(1:4, each=n_per_group), cex=1)
# fit ---------------------------------------------------------------------
# four options
#   - exact         : fit movMF from K=2 to K=10
#   - reduce_greedy : fit movMF with K=10 and greedy reduction
#   - reduce_hclust : fit movMF with K=10 and hclust reduction (partitional)
#   - reduce_kmedoids : fit movMF with K=10 and kmedoids reduction (partitional)
# filename to save or load
file_name = "computed_fits.RData"
if (file.exists(file_name)){
load(file_name)
} else{
# empty vector of list to save computed outputs
fits_exact  = vector("list", length=9)
fits_greedy = vector("list", length=9)
fits_hclust = vector("list", length=9)
fits_kmedoids = vector("list", length=9)
# fit exact
for (i in 1:9){
fits_exact[[i]] = aux_movMF_exact(pts_all, K=(i+1))
}
# fit others
fits_greedy[[9]] <- fits_hclust[[9]] <- fits_kmedoids[[9]] <- fits_exact[[9]]
for (i in 1:8){
fits_greedy[[i]] = aux_movMF_reduce(pts_all, big.K = 10, small.K = i+1,use.greedy=TRUE)
fits_hclust[[i]] = aux_movMF_reduce(pts_all, big.K = 10, small.K = i+1, use.greedy = FALSE, use.hclust = TRUE)
fits_kmedoids[[i]] = aux_movMF_reduce(pts_all, big.K = 10, small.K = i+1, use.greedy = FALSE, use.hclust = FALSE)
}
save(fits_exact, fits_greedy, fits_hclust, fits_kmedoids, file="computed_fits.RData")
}
# extract BIC values
vals_BIC <- array(0,c(9,4))
for (i in 1:9){
vals_BIC[i,1] <- fits_exact[[i]]$BIC
vals_BIC[i,2] <- fits_greedy[[i]]$BIC
vals_BIC[i,3] <- fits_hclust[[i]]$BIC
vals_BIC[i,4] <- fits_kmedoids[[i]]$BIC
}
now_idx = 9
graphics.off()
x11()
par(mfrow=c(1,4), pty="s")
plot(pts_all, col=fits_exact[[now_idx]]$cluster, pch=19, cex=0.5, asp=1, main=paste0("Exact:K=",now_idx+1))
plot(pts_all, col=fits_greedy[[now_idx]]$cluster, pch=19, cex=0.5, asp=1,  main=paste0("Greedy:K=",now_idx+1))
plot(pts_all, col=fits_hclust[[now_idx]]$cluster, pch=19, cex=0.5, asp=1,  main=paste0("Hclust:K=",now_idx+1))
plot(pts_all, col=fits_kmedoids[[now_idx]]$cluster, pch=19, cex=0.5, asp=1,  main=paste0("Kmedoids:K=",now_idx+1))
matplot(vals_BIC)
# UNBELIEVABLY POOR RESULTS; NEED TO CONSULT WEIGHTED VERSION OF K-MEDOIDS
# setup -------------------------------------------------------------------
rm(list=ls())
library(pacman)
pacman::p_load(rstudioapi,
ggplot2,
cowplot,
scales,
readr,
dplyr,
reshape2,
R.matlab,
ggthemes,
maotai,
movMF,
vMF,
viridisLite)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("../auxiliary.R")
# data-generating process -------------------------------------------------
# 4 equidistant locations
vec_mu = c(0, pi/2, pi, 3*pi/2)
small_kappa = 5
large_kappa = 50
mat_mu = array(0,c(length(vec_mu),2))
for (i in 1:length(vec_mu)){
now_mu = vec_mu[i]
mat_mu[i,1] = cos(now_mu)
mat_mu[i,2] = sin(now_mu)
}
# randomly generate: east and west are high kappa, north and south are small kappa
n_per_group = 100
pts_north = vMF::rvMF(n_per_group, mat_mu[1,]*small_kappa)
pts_east  = vMF::rvMF(n_per_group, mat_mu[2,]*large_kappa)
pts_south = vMF::rvMF(n_per_group, mat_mu[3,]*small_kappa)
pts_west  = vMF::rvMF(n_per_group, mat_mu[4,]*large_kappa)
pts_all   = rbind(pts_north, pts_east, pts_south, pts_west)
# test draw the distribution ----------------------------------------------
# draw the exact distributions
grid_angle  = seq(from=0, to=2*pi, length.out=1000)
wow_density = aux_density2_mix(grid_angle, mat_mu, c(small_kappa, large_kappa, small_kappa, large_kappa))
pts_density = wow_density$coords
max_density = wow_density$whichK
par(pty="s", mfrow=c(1,2))
# density
plot(pts_density[,1], pts_density[,2], type="l", lwd=2, asp=1)
lines(cos(grid_angle), sin(grid_angle))
# points
plot(pts_density[,1], pts_density[,2], type="l", lwd=2, asp=1, col="#0000FF00")
lines(cos(grid_angle), sin(grid_angle))
points(pts_all[,1], pts_all[,2], pch=21, col=rep(1:4, each=n_per_group), cex=1)
# fit ---------------------------------------------------------------------
# four options
#   - exact         : fit movMF from K=2 to K=10
#   - reduce_greedy : fit movMF with K=10 and greedy reduction
#   - reduce_hclust : fit movMF with K=10 and hclust reduction (partitional)
#   - reduce_kmedoids : fit movMF with K=10 and kmedoids reduction (partitional)
# filename to save or load
file_name = "computed_fits.RData"
if (file.exists(file_name)){
load(file_name)
} else{
# empty vector of list to save computed outputs
fits_exact  = vector("list", length=9)
fits_greedy = vector("list", length=9)
fits_hclust = vector("list", length=9)
fits_kmedoids = vector("list", length=9)
# fit exact
for (i in 1:9){
fits_exact[[i]] = aux_movMF_exact(pts_all, K=(i+1))
}
# fit others
fits_greedy[[9]] <- fits_hclust[[9]] <- fits_kmedoids[[9]] <- fits_exact[[9]]
for (i in 1:8){
fits_greedy[[i]] = aux_movMF_reduce(pts_all, big.K = 10, small.K = i+1,use.greedy=TRUE)
fits_hclust[[i]] = aux_movMF_reduce(pts_all, big.K = 10, small.K = i+1, use.greedy = FALSE, use.hclust = TRUE)
fits_kmedoids[[i]] = aux_movMF_reduce(pts_all, big.K = 10, small.K = i+1, use.greedy = FALSE, use.hclust = FALSE)
}
save(fits_exact, fits_greedy, fits_hclust, fits_kmedoids, file="computed_fits.RData")
}
# extract BIC values
vals_BIC <- array(0,c(9,4))
for (i in 1:9){
vals_BIC[i,1] <- fits_exact[[i]]$BIC
vals_BIC[i,2] <- fits_greedy[[i]]$BIC
vals_BIC[i,3] <- fits_hclust[[i]]$BIC
vals_BIC[i,4] <- fits_kmedoids[[i]]$BIC
}
now_idx = 9
graphics.off()
x11()
par(mfrow=c(1,5), pty="s")
plot(pts_all, col=fits_exact[[now_idx]]$cluster, pch=19, cex=0.5, asp=1, main=paste0("Exact:K=",now_idx+1))
plot(pts_all, col=fits_greedy[[now_idx]]$cluster, pch=19, cex=0.5, asp=1,  main=paste0("Greedy:K=",now_idx+1))
plot(pts_all, col=fits_hclust[[now_idx]]$cluster, pch=19, cex=0.5, asp=1,  main=paste0("Hclust:K=",now_idx+1))
plot(pts_all, col=fits_kmedoids[[now_idx]]$cluster, pch=19, cex=0.5, asp=1,  main=paste0("Kmedoids:K=",now_idx+1))
matplot(vals_BIC)
# UNBELIEVABLY POOR RESULTS; NEED TO CONSULT WEIGHTED VERSION OF K-MEDOIDS
remove.packages("maotai")
