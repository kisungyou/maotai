scalar2F1(1/2,1/2,3/2,(myz^2), method = "laplace")
myz = runif(1, min=-1, max=1)
asin(myz)/myz
scalar2F1(1/2,1/2,3/2,(myz^2), method = "series")
scalar2F1(1/2,1/2,3/2,(myz^2), method = "integral")
scalar2F1(1/2,1/2,3/2,(myz^2), method = "laplace")
myz = runif(1, min=-1, max=1)
asin(myz)/myz
scalar2F1(1/2,1/2,3/2,(myz^2), method = "series")
scalar2F1(1/2,1/2,3/2,(myz^2), method = "integral")
scalar2F1(1/2,1/2,3/2,(myz^2), method = "laplace")
myz = runif(1, min=-1, max=1)
asin(myz)/myz
scalar2F1(1/2,1/2,3/2,(myz^2), method = "series")
scalar2F1(1/2,1/2,3/2,(myz^2), method = "integral")
scalar2F1(1/2,1/2,3/2,(myz^2), method = "laplace")
rm(list=ls())
library(maotai)
matrix2F1(1,1,1,matrix(1))
library(maotai)
myz = runif(1, min=-1, max=1)
asin(myz)/myz
scalar2F1(1/2,1/2,3/2,(myz^2), method = "series")
scalar2F1(1/2,1/2,3/2,(myz^2), method = "integral")
scalar2F1(1/2,1/2,3/2,(myz^2), method = "laplace")
matrix2F1(1/2,1/2,3/2,matrix((myz^2)), method = "laplace")
rm(list=ls())
library(maotai)
# # special case
myz = runif(1, min=-1, max=1)
asin(myz)/myz
scalar2F1(1/2,1/2,3/2,(myz^2), method = "series")
scalar2F1(1/2,1/2,3/2,(myz^2), method = "integral")
scalar2F1(1/2,1/2,3/2,(myz^2), method = "laplace")
matrix2F1(1/2,1/2,3/2,matrix((myz^2)), method = "laplace")
# # special case
myz = runif(1, min=-1, max=1)
asin(myz)/myz
scalar2F1(1/2,1/2,3/2,(myz^2), method = "series")
scalar2F1(1/2,1/2,3/2,(myz^2), method = "integral")
scalar2F1(1/2,1/2,3/2,(myz^2), method = "laplace")
matrix2F1(1/2,1/2,3/2,matrix((myz^2)), method = "laplace")
# # special case
myz = runif(1, min=-1, max=1)
asin(myz)/myz
scalar2F1(1/2,1/2,3/2,(myz^2), method = "series")
scalar2F1(1/2,1/2,3/2,(myz^2), method = "integral")
scalar2F1(1/2,1/2,3/2,(myz^2), method = "laplace")
matrix2F1(1/2,1/2,3/2,matrix((myz^2)), method = "laplace")
# # special case
myz = runif(1, min=-1, max=1)
asin(myz)/myz
scalar2F1(1/2,1/2,3/2,(myz^2), method = "series")
scalar2F1(1/2,1/2,3/2,(myz^2), method = "integral")
scalar2F1(1/2,1/2,3/2,(myz^2), method = "laplace")
matrix2F1(1/2,1/2,3/2,matrix((myz^2)), method = "laplace")
# # special case
myz = runif(1, min=-1, max=1)
asin(myz)/myz
scalar2F1(1/2,1/2,3/2,(myz^2), method = "series")
scalar2F1(1/2,1/2,3/2,(myz^2), method = "integral")
scalar2F1(1/2,1/2,3/2,(myz^2), method = "laplace")
matrix2F1(1/2,1/2,3/2,matrix((myz^2)), method = "laplace")
# # special case
myz = runif(1, min=-1, max=1)
asin(myz)/myz
scalar2F1(1/2,1/2,3/2,(myz^2), method = "series")
scalar2F1(1/2,1/2,3/2,(myz^2), method = "integral")
scalar2F1(1/2,1/2,3/2,(myz^2), method = "laplace")
matrix2F1(1/2,1/2,3/2,matrix((myz^2)), method = "laplace")
# # special case
myz = runif(1, min=-1, max=1)
asin(myz)/myz
scalar2F1(1/2,1/2,3/2,(myz^2), method = "series")
scalar2F1(1/2,1/2,3/2,(myz^2), method = "integral")
scalar2F1(1/2,1/2,3/2,(myz^2), method = "laplace")
matrix2F1(1/2,1/2,3/2,matrix((myz^2)), method = "laplace")
library(maotai)
help("scalar1F1")
help("scalar2F1")
library(maotai)
help(cmds)
library(maotai)
library(maotai)
pkgdown::build_site()
library(maotai)
library(maotai)
scalar0F1(0.1, 4)
scalarpFq(0, 0.1, 4)
scalar1F1(0.5, 1.5, 3)
scalarpFq(0.5, 1.5, 3)
rm(list=ls())
library(maotai)
sum(log(0 + seq(from=0, to=1)))
library(maotai)
library(maotai)
help(mgamma)
m = 5
a = 01
a = 10
base::lgamma(a - 0.5*(seqj-1))
m = round(m)
seqj = 1:m
base::lgamma(a - 0.5*(seqj-1))
rm(list=ls())
library(maotai)
library(maotai)
library(maotai)
library(maotai)
pkgdown::build_site()
data= matrix(rnorm(5*2),ncol=2)
D1 = as.matrix(dist(data))
n = base::nrow(data)
D2 = rbind(cbind(D1, rep(1,n)), c(rep(1,n), 0))
D2
library(maotai)
library(maotai)
lfactorial(10)
library(maotai)
data(iris)
X = as.matrix(iris[,1:4])
## COMPUTE CAYLEY-MENGER DETERMINANT
cayleymenger(X)
library(maotai)
cayleymenger(X)
X = as.matrix(iris[,1:4])
## COMPUTE CAYLEY-MENGER DETERMINANT
#  since k=4 < n=149, it should be zero.
cayleymenger(X)
Y = X[1:3]
cayleymenger(Y)
Y
Y = X[1:3,]
cayleymenger(Y)
rm(list=ls())
pkgdown::build_site()
library(maotai)
pkgdown::build_site()
library(maotai)
library(maotai)
??py_install
library(maotai)
install_scipy()
Y
install_scipy()
library(maotai)
library(maotai)
library(maotai)
X   = as.matrix(iris[,1:4])
lab = as.vector(iris[,5])
D    = stats::dist(X)
cmd2 = cmdscale(D, k=2)
mmdA = hidden_mmds(D, ndim=2, abstol=1e-2)
mmdB = hidden_mmds(D, ndim=2, abstol=1e-8)
par(mfrow=c(1,3))
plot(cmd2, col=lab, main = "cmds")
plot(mmdA, col=lab, main="mmds-2")
plot(mmdB, col=lab, main="mmds-8")
lab
lab = as.factor(iris[,5])
par(mfrow=c(1,3))
plot(cmd2, col=lab, main = "cmds")
plot(mmdA, col=lab, main="mmds-2")
plot(mmdB, col=lab, main="mmds-8")
X   = as.matrix(iris[,1:4])
lab = as.factor(iris[,5])
D    = stats::dist(X)
cmd2 = cmdscale(D, k=2)
mmdA = hidden_mmds(D, ndim=2, abstol=1e-2)
mmdB = hidden_mmds(D, ndim=2, abstol=1e-10)
par(mfrow=c(1,3))
plot(cmd2, col=lab, main = "cmds")
plot(mmdA, col=lab, main="mmds-2")
plot(mmdB, col=lab, main="mmds-8")
X   = as.matrix(iris[,1:4])
lab = as.factor(iris[,5])
D    = stats::dist(X)
cmd2 = cmdscale(D, k=2)
mmdA = hidden_mmds(D, ndim=2, abstol=1e-2)
mmdB = hidden_mmds(D, ndim=2, abstol=1e-10)
par(mfrow=c(1,3))
plot(cmd2, col=lab, main = "cmds")
plot(mmdA, col=lab, main="mmds-2")
plot(mmdB, col=lab, main="mmds-8")
image(as.matrix(dist(cmd2)))
image(as.matrix(dist(mmdA)))
norm(as.matrix(dist(cmd2))-as.matrix(dist(mmdA)),"F")
mmdA
par(mfrow=c(1,3), pty="s")
plot(cmd2, col=lab, main = "cmds")
plot(mmdA, col=lab, main="mmds-2")
plot(mmdB, col=lab, main="mmds-8")
library(maotai)
X   = as.matrix(iris[,1:4])
lab = as.factor(iris[,5])
D    = stats::dist(X)
cmd2 = cmdscale(D, k=2)
mmdA = hidden_mmds(D, ndim=2, abstol=1e-2)
mmdB = hidden_mmds(D, ndim=2, abstol=1e-10)
par(mfrow=c(1,3), pty="s")
plot(cmd2, col=lab, main = "cmds")
plot(mmdA, col=lab, main="mmds-2")
plot(mmdB, col=lab, main="mmds-8")
X   = as.matrix(iris[,1:4])
lab = as.factor(iris[,5])
D    = stats::dist(X)
cmd2 = cmdscale(D, k=2)
mmdA = hidden_mmds(D, ndim=2, abstol=1e-2)
mmdB = hidden_mmds(D, ndim=2, abstol=1e-10)
par(mfrow=c(1,3), pty="s")
plot(cmd2, col=lab, main = "cmds")
plot(mmdA, col=lab, main="mmds-2")
plot(mmdB, col=lab, main="mmds-8")
X   = as.matrix(iris[,1:4])
lab = as.factor(iris[,5])
D    = stats::dist(X)
cmd2 = cmdscale(D, k=2)
mmdA = hidden_mmds(D, ndim=2, abstol=1e-2)
mmdB = hidden_mmds(D, ndim=2, abstol=1e-10)
par(mfrow=c(1,3), pty="s")
plot(cmd2, col=lab, main = "cmds")
plot(mmdA, col=lab, main="mmds-2")
plot(mmdB, col=lab, main="mmds-8")
rm(list=ls())
library(maotai)
pkgdown::build_site()
library(maotai)
library(maotai)
library(maotai)
library(maotai)
library(maotai)
install.packages("RcppDist")
devtools::document()
library(maotai)
library(maotai)
library(maotai)
library(maotai)
mat = matrix(rnorm(5*5),ncol=5)
round(Matrix::rankMatrix(mat))
as.integer(Matrix::rankMatrix(mat))
# generate an empirical covariance scaled
prep_mat = stats::cov(matrix(rnorm(100*4),ncol=4))
prep_vec = as.vector(stats::runif(4)+1)
prep_cov = prep_vec%*%prep_mat%*%prep_vec
# scale
prep_cor = cov2corr(prep_cov)
# visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,2), pty="s")
image(prep_cov, main="hey")
par(opar)
prep_cov
help(runif)
prep_mat = stats::cov(matrix(rnorm(100*4),ncol=4))
prep_vec = as.vector(stats::runif(4)+1)
prep_vec
prep_mat = stats::cov(matrix(rnorm(100*4),ncol=4))
prep_vec = as.vector(stats::runif(4)+1)
prep_cov = prep_vec%*%prep_mat%*%prep_vec
prep_cov
prep_mat = stats::cov(matrix(rnorm(100*4),ncol=4))
prep_vec = diag(as.vector(stats::runif(4)+1))
prep_cov = prep_vec%*%prep_mat%*%prep_vec
prep_cov
# generate an empirical covariance scaled
prep_mat = stats::cov(matrix(rnorm(100*4),ncol=4))
prep_vec = diag(as.vector(stats::runif(4)+1))
prep_cov = prep_vec%*%prep_mat%*%prep_vec
# scale
prep_cor = cov2corr(prep_cov)
# visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,2), pty="s")
image(prep_cov, main="covariance")
image(prep_cor, main="correlation")
par(opar)
library(maotai)
# visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,2), pty="s")
image(prep_cov, main="covariance")
image(prep_cor, main="correlation")
par(opar)
# scale
prep_cor = cov2corr(prep_cov)
# visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,2), pty="s")
image(prep_cov, main="covariance")
image(prep_cor, main="correlation")
par(opar)
prep_cor
library(maotai)
# generate an empirical covariance scaled
prep_mat = stats::cov(matrix(rnorm(100*4),ncol=4))
prep_vec = diag(as.vector(stats::runif(4)+1))
prep_cov = prep_vec%*%prep_mat%*%prep_vec
# scale
prep_cor = cov2corr(prep_cov)
# visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,2), pty="s")
image(prep_cov, main="covariance")
image(prep_cor, main="correlation")
par(opar)
prep_mat = stats::cov(matrix(rnorm(100*10),ncol=10))
prep_vec = diag(as.vector(stats::runif(10)+1))
prep_cov = prep_vec%*%prep_mat%*%prep_vec
# scale
prep_cor = cov2corr(prep_cov)
# visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,2), pty="s")
image(prep_cov, main="covariance")
image(prep_cor, main="correlation")
par(opar)
# generate an empirical covariance scaled
prep_mat = stats::cov(matrix(rnorm(100*10),ncol=10))
prep_vec = diag(as.vector(stats::runif(10)+1))
prep_cov = prep_vec%*%prep_mat%*%prep_vec
# scale
prep_cor = cov2corr(prep_cov)
# visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,2), pty="s")
image(prep_cov, main="covariance")
image(prep_cor, main="correlation")
par(opar)
prep_mat = stats::cov(matrix(rnorm(100*10),ncol=10))
prep_vec = diag(as.vector(stats::runif(10, max=5)))
prep_cov = prep_vec%*%prep_mat%*%prep_vec
# scale
prep_cor = cov2corr(prep_cov)
# visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,2), pty="s")
image(prep_cov, main="covariance")
image(prep_cor, main="correlation")
par(opar)
prep_mat = stats::cov(matrix(rnorm(100*10),ncol=10))
prep_vec = diag(as.vector(stats::runif(10, max=5)))
prep_cov = prep_vec%*%prep_mat%*%prep_vec
# scale
prep_cor = cov2corr(prep_cov)
# visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,2), pty="s")
image(prep_cov, main="covariance")
image(prep_cor, main="correlation")
par(opar)
# generate an empirical covariance scaled
prep_mat = stats::cov(matrix(rnorm(100*10),ncol=10))
prep_vec = diag(as.vector(stats::runif(10, max=5)))
prep_cov = prep_vec%*%prep_mat%*%prep_vec
# scale
prep_cor = cov2corr(prep_cov)
# visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,2), pty="s")
image(prep_cov, axes=FALSE, main="covariance")
image(prep_cor, axes=FALSE, main="correlation")
par(opar)
library(maotai)
library(maotai)
#' # generate an empirical covariance scaled
#' prep_mat = stats::cov(matrix(rnorm(100*10),ncol=10))
#' prep_vec = diag(as.vector(stats::runif(10, max=5)))
#' prep_cov = prep_vec%*%prep_mat%*%prep_vec
#'
#' # compute correlation and partial correlation matrices
#' prep_cor = cov2corr(prep_cov)
#' prep_par = cov2pcorr(prep_cov)
#'
#' # visualize
#' opar <- par(no.readonly=TRUE)
#' par(mfrow=c(1,3), pty="s")
#' image(prep_cov, axes=FALSE, main="covariance")
#' image(prep_cor, axes=FALSE, main="correlation")
#' image(prep_par, axes=FALSE, main="partial correlation")
#' par(opar)
#' # generate an empirical covariance scaled
#' prep_mat = stats::cov(matrix(rnorm(100*10),ncol=10))
#' prep_vec = diag(as.vector(stats::runif(10, max=5)))
#' prep_cov = prep_vec%*%prep_mat%*%prep_vec
#'
#' # compute correlation and partial correlation matrices
#' prep_cor = cov2corr(prep_cov)
#' prep_par = cov2pcorr(prep_cov)
#'
#' # visualize
#' opar <- par(no.readonly=TRUE)
#' par(mfrow=c(1,3), pty="s")
#' image(prep_cov, axes=FALSE, main="covariance")
#' image(prep_cor, axes=FALSE, main="correlation")
#' image(prep_par, axes=FALSE, main="partial correlation")
#' par(opar)
library(maotai)
library(maotai)
# generate an empirical covariance scaled
prep_mat = stats::cov(matrix(rnorm(100*10),ncol=10))
prep_vec = diag(as.vector(stats::runif(10, max=5)))
prep_cov = prep_vec%*%prep_mat%*%prep_vec
# compute correlation and partial correlation matrices
prep_cor = cov2corr(prep_cov)
prep_par = cov2pcorr(prep_cov)
# visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3), pty="s")
image(prep_cov, axes=FALSE, main="covariance")
image(prep_cor, axes=FALSE, main="correlation")
image(prep_par, axes=FALSE, main="partial correlation")
par(opar)
prep_par
library(maotai)
prep_par
library(maotai)
# generate an empirical covariance scaled
prep_mat = stats::cov(matrix(rnorm(100*10),ncol=10))
prep_vec = diag(as.vector(stats::runif(10, max=5)))
prep_cov = prep_vec%*%prep_mat%*%prep_vec
# compute correlation and partial correlation matrices
prep_cor = cov2corr(prep_cov)
prep_par = cov2pcorr(prep_cov)
# visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3), pty="s")
image(prep_cov, axes=FALSE, main="covariance")
image(prep_cor, axes=FALSE, main="correlation")
image(prep_par, axes=FALSE, main="partial correlation")
par(opar)
library(maotai)
usethis::use_github_action_check_standard()
library(remotes)
help("install_deps")
library(maotai)
devtools::load_all(".")
devtools::load_all(".")
usethis::use_test("bmds")
library(maotai)
devtools::load_all(".")
??bmds
library(maotai)
library(maotai)
devtools::document()
devtools::load_all(".")
covr::package_coverage(quiet=FALSE)
library(maotai)
covr::report()
install.packages("DT")
covr::package_coverage(quiet = FALSE)
usethis::use_test("weiszfeld")
n = 20
p = 10
t = seq(from=0,to=10,length.out=p)
X = array(0,c(n,p))
for (i in 1:n){
X[i,] = sin(t) + stats::rnorm(p, sd=0.5)
}
vecL1 = as.vector(weiszfeld(X))
vecL1
length(vecL1)
usethis::use_test("tSNE")
myn = 10
myp = 3
prep_mat = rbind(matrix(rnorm(myn*myp, mean=-2), ncol=myp),
matrix(rnorm(myn*myp, mean= 2), ncol=myp))
run_tsne = maotai::tsne(prep_mat, ndim=2)$embed
run_tsne = maotai::tsne(prep_mat, ndim=2, perplexity=5)$embed
plot(run_sne)
plot(run_tsne)
myn = 10
myp = 3
prep_mat = rbind(matrix(rnorm(myn*myp, mean=-2), ncol=myp),
matrix(rnorm(myn*myp, mean= 2), ncol=myp))
run_tsne = maotai::tsne(prep_mat, ndim=2, perplexity=5)$embed
myn = 10
myp = 3
prep_mat = rbind(matrix(rnorm(myn*myp, mean=-2), ncol=myp),
matrix(rnorm(myn*myp, mean= 2), ncol=myp))
run_tsne = maotai::tsne(prep_mat, ndim=2, perplexity=5)$embed
myn = 10
myp = 3
prep_mat = rbind(matrix(rnorm(myn*myp, mean=-2), ncol=myp),
matrix(rnorm(myn*myp, mean= 2), ncol=myp))
run_tsne = maotai::tsne(prep_mat, ndim=2, perplexity=5)$embed
myn = 10
myp = 3
prep_mat = rbind(matrix(rnorm(myn*myp, mean=-2), ncol=myp),
matrix(rnorm(myn*myp, mean= 2), ncol=myp))
run_tsne = maotai::tsne(prep_mat, ndim=2, perplexity=5)$embed
expect_equal(base::nrow(run_tsne), 2*myn)
library(maotai)
covr::package_coverage(quite=FALSE)
run_tsne = maotai::tsne(prep_mat, ndim=2, perplexity=5)$embed
run_tsne
covr::package_coverage(quite=FALSE)
library(maotai)
covr::codecov(quiet=FALSE)
covr::codecov(token="61035265-e1f0-4fc7-8aa7-0eba009d6146", quiet=FALSE)
devtools::load_all(".")
install.packages("badgecreatr")
library(badgecreatr)
help("badge_cran_downloads")
badgecreatr::badge_cran_downloads("maotai", period="grand-total")
help(licensebadge)
??licensebage
badge_last_change_static(date = NULL)
library(glmnet)
install.
install.packages("glmnet", dependencies = TRUE)
library(glmnet)
help(glmnet)
