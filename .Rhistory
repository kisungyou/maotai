vec_time = c(vec_time, now_time)
vec_geo = c(vec_geo, now_geo)
}
df_time = data.frame(Percentage=vec_per,
Time=vec_time,
Geometry=vec_geo)
df_time$Geometry = factor(df_time$Geometry, levels=c("ECM","LEC","AIRM"))
# remove all unnecessary ones
rm(vec_per, vec_time, vec_geo, vec_acc)
rm(u_percentage, i, tmp_acc)
rm(file_acc, file_time, sub_acc, sub_time)
rm(now_acc, now_geo, now_per, now_time)
# base plots
base_acc = ggplot(df_acc, aes(x=Percentage, y=Accuracy, group=Geometry, color=Geometry)) +
geom_line() +
ylab("Error")
base_time <- ggplot(df_time, aes(x=Percentage, y=Time, group=Geometry, color=Geometry)) +
geom_line() +
scale_y_log10(labels = scientific_format()) +
ylab("Elapsed Time (sec)")
# modify: parameters
par_width <- 0.5
# modify: exert to figures
base_acc <- base_acc +
ggtitle("(A)") +
scale_x_continuous(
breaks=seq(5, 25, by=5),
labels = paste0(seq(5, 25, by=5), "%")) +
theme_minimal() +
theme(axis.line=element_line(color="black", linewidth=par_width),
axis.text = element_text(size=size_axis_text),
axis.title = element_text(size=size_axis_title),
legend.title = element_text(size=size_legend_title),
plot.title = element_text(size=cow_lab_size),
panel.grid.major.x = element_line(colour="grey90"),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
legend.position = "bottom")
base_time <- base_time +
ggtitle("(B)") +
scale_x_continuous(
breaks=seq(5, 25, by=5),
labels = paste0(seq(5, 25, by=5), "%")) +
theme_minimal() +
theme(axis.line=element_line(color="black", linewidth=par_width),
axis.text = element_text(size=size_axis_text),
axis.title = element_text(size=size_axis_title),
legend.title = element_text(size=size_legend_title),
plot.title = element_text(size=cow_lab_size),
panel.grid.major.x = element_line(colour="grey90"),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
legend.position = "bottom")
# cowplot: two plots
cow_col = plot_grid(
base_acc + theme(legend.position = "none"),
base_time+theme(legend.position = "none"),
align = "vh",
nrow=1
)
# cowplot: way around for getting the component
base_tmp = base_acc +
theme(legend.position="right",
legend.justification = "center",
legend.text = element_text(size=size_legend_text))
legend = cowplot::get_plot_component(base_tmp, "guide-box-bottom", return_all=TRUE)
# cowplot: arrange
cow_fin <- plot_grid(cow_col, legend,
nrow=2, rel_heights = c(10,1))
# cowplot: two plots
cow_col = plot_grid(
base_acc + theme(legend.position = "none"),
base_time+theme(legend.position = "none"),
align = "vh",
nrow=1
)
# cowplot: way around for getting the component
base_tmp = base_acc +
theme(legend.position="right",
legend.justification = "center",
legend.text = element_text(size=size_legend_text))
legend = cowplot::get_plot_component(base_tmp, "guide-box-right", return_all=TRUE)
# cowplot: arrange
cow_fin <- plot_grid(cow_col, legend,
nrow=1, rel_widths = c(10,1))
ggsave(paste0(target_folder,"fig_sim2.png"),
plot = cow_fin,
width = width_double,
height = height_single)
target_folder = "../version_2_NetworkNeuroscience_initial/figures/"
# cowplot: arrange
cow_fin <- plot_grid(cow_col, legend,
nrow=1, rel_widths = c(10,1))
ggsave(paste0(target_folder,"fig_sim2.png"),
plot = cow_fin,
width = width_double,
height = height_single)
# Figure 3 : fig_sim1.png -------------------------------------------------
# read-in the files
file_acc  = readr::read_csv("../code_experiment/data/result_simulation/sim1_error.csv")
file_time = readr::read_csv("../code_experiment/data/result_simulation/sim1_time.csv")
u_dimension = sort(unique(file_acc$Dimension))
# rearrange: accuracy
vec_dim = c()
vec_acc = c()
vec_geo = c()
for (i in 1:length(u_dimension)){
# subset
sub_acc = file_acc %>% filter(Dimension==u_dimension[i])
# create ones
now_dim = rep(u_dimension[i], 3)
now_acc = rep(0, 3)
now_acc[1] = base::mean(sub_acc$ECM)
now_acc[2] = base::mean(sub_acc$LEC)
now_acc[3] = base::mean(sub_acc$AIRM)
now_geo = c("ECM","LEC","AIRM")
# graft
vec_dim = c(vec_dim, now_dim)
vec_acc = c(vec_acc, now_acc)
vec_geo = c(vec_geo, now_geo)
}
df_acc = data.frame(Dimension=vec_dim,
Accuracy=vec_acc,
Geometry=vec_geo)
df_acc$Geometry = factor(df_acc$Geometry, levels=c("ECM","LEC","AIRM"))
# rearrange: time
vec_dim  = c()
vec_time = c()
vec_geo  = c()
for (i in 1:length(u_dimension)){
# subset
sub_time = file_time %>% filter(Dimension==u_dimension[i])
# create ones
now_dim = rep(u_dimension[i], 3)
now_time = rep(0, 3)
now_time[1] = base::mean(sub_time$ECM)
now_time[2] = base::mean(sub_time$LEC)
now_time[3] = base::mean(sub_time$AIRM)
now_geo = c("ECM","LEC","AIRM")
# graft
vec_dim = c(vec_dim, now_dim)
vec_time = c(vec_time, now_time)
vec_geo = c(vec_geo, now_geo)
}
df_time = data.frame(Dimension=vec_dim,
Time=vec_time,
Geometry=vec_geo)
df_time$Geometry = factor(df_time$Geometry, levels=c("ECM","LEC","AIRM"))
# remove all unnecessary ones
rm(vec_dim, vec_time, vec_geo, vec_acc)
rm(i, sub_acc, sub_time, now_acc, now_dim, now_geo, now_time)
rm(u_dimension)
# base plots
base_acc = ggplot(df_acc, aes(x=Dimension, y=Accuracy, group=Geometry, color=Geometry)) +
geom_line() +
ylab("Error")
base_time <- ggplot(df_time, aes(x=Dimension, y=Time, group=Geometry, color=Geometry)) +
geom_line() +
scale_y_log10() +
ylab("Elapsed Time (sec)")
# modify: parameters
par_width <- 0.5
# modify: exert to figures
base_acc <- base_acc +
ggtitle("(A)") +
scale_x_continuous(breaks=seq(100, 1000, by=100)) +
theme_minimal() +
theme(axis.line=element_line(color="black", linewidth=par_width),
axis.text = element_text(size=size_axis_text),
axis.title = element_text(size=size_axis_title),
legend.title = element_text(size=size_legend_title),
plot.title = element_text(size=cow_lab_size),
panel.grid.major.x = element_line(colour="grey90"),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
legend.position = "bottom")
base_time <- base_time +
ggtitle("(B)") +
scale_x_continuous(breaks=seq(100, 1000, by=100)) +
theme_minimal() +
theme(axis.line=element_line(color="black", linewidth=par_width),
panel.grid.major.x = element_line(colour="grey90"),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.text = element_text(size=size_axis_text),
axis.title = element_text(size=size_axis_title),
legend.title = element_text(size=size_legend_title),
legend.text = element_text(size=size_legend_text),
plot.title = element_text(size=cow_lab_size),
legend.position = "bottom")
# cowplot: two plots
cow_col = plot_grid(
base_acc + theme(legend.position = "none"),
base_time+theme(legend.position = "none"),
align = "vh",
nrow=1
)
# cowplot: way around for getting the component
base_tmp = base_acc +
theme(legend.position="right",
legend.justification = "center",
legend.text = element_text(size=size_legend_text))
legend = cowplot::get_plot_component(base_tmp, "guide-box-right", return_all=TRUE)
# cowplot: arrange
cow_fin <- plot_grid(cow_col, legend,
nrow=1, rel_widths = c(10,1))
ggsave(paste0(target_folder,"fig_sim1.png"),
plot = cow_fin,
width = width_double,
height = height_single)
rm(list=ls())
help(match.arg)
help(hclust)
X = as.matrix(iris[,2:4])
pdist_obj = stats::dist(X)
pdist_obj
hclust_obj <- fastcluster::hclust(pdist_obj, method="single")
hclust_obj
help("cutree")
help(pam)
clust_obj <- cluster::pam(pdist_obj, k=par_target_num)
par_target_num = 2
clust_obj <- cluster::pam(pdist_obj, k=par_target_num)
clust_obj$clustering
clust_obj <- fastcluster::hclust(pdist_obj, method="single")
obtained_clust <- stats::cutree(clust_obj, k=par_target_num)
obtained_clust
obtained_clust = as.vector(factor(obtained_clust))
obtained_clust
obtained_clust = as.vector(as.factor(obtained_clust))
clust_obj <- cluster::pam(pdist_obj, k=par_target_num)
obtained_clust <- clust_obj$clustering
obtained_clust = as.vector(as.factor(obtained_clust))
obtained_clust
clust_obj <- cluster::pam(pdist_obj, k=par_target_num)
obtained_clust <- clust_obj$clustering
# get the indices
list_indices = vector("list", length=par_target_num)
for (i in 1:par_target_num){
list_indices[[i]] = which(obtained_clust==i)
}
help(besselI)
help(sum)
help(rowsum)
A = matrix(rnorm(4,2), ncol=2)
rowsum(A)
rowSums(A)
A
A = matrix(rnorm(4*2), ncol=2)
A
rowSums(A)
help(log)
install.packages("movMF", dependencies = TRUE)
# fit the model with movMF package
out_movMF <- movMF::movMF(X, 3)
# simple example
# data matrix normalized
X = as.matrix(iris[,2:4])
X = as.matrix(scale(X, center=TRUE, scale=FALSE))
X = X/sqrt(rowSums(X^2))
# fit the model with movMF package
out_movMF <- movMF::movMF(X, 3)
predict(out_movMF, X)
names(out_movMF)
out_movMF$theta
out_movMF$alpha
out_movMF$P
help(movMF)
out_movMF$theta
# data matrix normalized
X = as.matrix(iris[,2:4])
X = as.matrix(scale(X, center=TRUE, scale=FALSE))
X = X/sqrt(rowSums(X^2))
# fit the model with movMF package
out_movMF <- movMF::movMF(X, 3)
clust_movMF <- predict(out_movMF, X)
coef(out_movMF)
# fit the model with movMF package
out_movMF <- movMF::movMF(X, 2)
clust_movMF <- predict(out_movMF, X)
clust_movMF
out_movMF
out_movMF$theta
rowSums(X^2)
# use my function
fit_weights <- out_movMF$alpha
fit_means   <- out_movMF$theta/sqrt(rowSums(out_movMF$theta^2))
fit_concentrations <- base::rowSums(out_movMF$theta)
# simple example
# data matrix normalized
X = as.matrix(iris[,2:4])
X = as.matrix(scale(X, center=TRUE, scale=FALSE))
X = X/sqrt(rowSums(X^2))
# fit the model with movMF package
out_movMF <- movMF::movMF(X, 3)
clust_movMF <- predict(out_movMF, X)
# use my function
fit_weights <- out_movMF$alpha
fit_means   <- out_movMF$theta/sqrt(rowSums(out_movMF$theta^2))
fit_concentrations <- base::rowSums(out_movMF$theta)
clust_mine <- movMF_info(X, fit_means, fit_concentration, fit_weights)$clustering
# simple example
# data matrix normalized
X = as.matrix(iris[,2:4])
X = as.matrix(scale(X, center=TRUE, scale=FALSE))
X = X/sqrt(rowSums(X^2))
# fit the model with movMF package
out_movMF <- movMF::movMF(X, 3)
clust_movMF <- predict(out_movMF, X)
# use my function
fit_weights <- out_movMF$alpha
fit_means   <- out_movMF$theta/sqrt(rowSums(out_movMF$theta^2))
fit_concentrations <- base::rowSums(out_movMF$theta)
clust_mine <- movMF_info(X, fit_means, fit_concentration, fit_weights)$clustering
# simple example
# data matrix normalized
X = as.matrix(iris[,2:4])
X = as.matrix(scale(X, center=TRUE, scale=FALSE))
X = X/sqrt(rowSums(X^2))
# fit the model with movMF package
out_movMF <- movMF::movMF(X, 3)
clust_movMF <- predict(out_movMF, X)
# use my function
fit_weights <- out_movMF$alpha
fit_means   <- out_movMF$theta/sqrt(rowSums(out_movMF$theta^2))
fit_concentrations <- base::rowSums(out_movMF$theta)
clust_mine <- movMF_info(X, fit_means, fit_concentration, fit_weights)$clustering
clust_mine <- movMF_info(X, fit_means, fit_concentrations, fit_weights)$clustering
# simple example
# data matrix normalized
X = as.matrix(iris[,2:4])
X = as.matrix(scale(X, center=TRUE, scale=FALSE))
X = X/sqrt(rowSums(X^2))
# fit the model with movMF package
out_movMF <- movMF::movMF(X, 3)
clust_movMF <- predict(out_movMF, X)
# use my function
fit_weights <- out_movMF$alpha
fit_means   <- out_movMF$theta/sqrt(rowSums(out_movMF$theta^2))
fit_concentrations <- base::rowSums(out_movMF$theta)
clust_mine <- movMF_info(X, fit_means, fit_concentrations, fit_weights)$clustering
help(besselI)
# simple example
# data matrix normalized
X = as.matrix(iris[,2:4])
X = as.matrix(scale(X, center=TRUE, scale=FALSE))
X = X/sqrt(rowSums(X^2))
# fit the model with movMF package
out_movMF <- movMF::movMF(X, 3)
clust_movMF <- predict(out_movMF, X)
# use my function
fit_weights <- out_movMF$alpha
fit_means   <- out_movMF$theta/sqrt(rowSums(out_movMF$theta^2))
fit_concentrations <- base::rowSums(out_movMF$theta)
clust_mine <- movMF_info(X, fit_means, fit_concentrations, fit_weights)$clustering
fit_concentrations
# use my function
fit_weights <- out_movMF$alpha
fit_means   <- out_movMF$theta/sqrt(rowSums(out_movMF$theta^2))
fit_concentrations <- sqrt(rowSums(fit$theta^2))
clust_mine <- movMF_info(X, fit_means, fit_concentrations, fit_weights)$clustering
fit_concentrations <- sqrt(rowSums(fit$theta^2))
# use my function
fit_weights <- out_movMF$alpha
fit_means   <- out_movMF$theta/sqrt(rowSums(out_movMF$theta^2))
fit_concentrations <- sqrt(rowSums(out_movMF$theta^2))
clust_mine <- movMF_info(X, fit_means, fit_concentrations, fit_weights)$clustering
clust_mine
clust_movMF
fit_concentrations
# visualize by PCA
X2d = X%*%eigen(cov(X))$vectors[,1:2]
X2d = X2d/sqrt(rowSums(X^2))
plot(X2d, col=clust_min)
# visualize by PCA
X2d = X%*%eigen(cov(X))$vectors[,1:2]
X2d = X2d/sqrt(rowSums(X^2))
plot(X2d, col=clust_mine)
# simple example
# data matrix normalized
X = as.matrix(iris[,2:4])
X = as.matrix(scale(X, center=TRUE, scale=FALSE))
X = X%*%eigen(cov(X))$vectors[,1:2] # apply PCA
X = X/sqrt(rowSums(X^2))
plot(X)
# simple example
# data matrix normalized
X = as.matrix(iris[,2:4])
X = as.matrix(scale(X, center=TRUE, scale=FALSE))
X = X%*%eigen(cov(X))$vectors[,1:2] # apply PCA
X = X/sqrt(rowSums(X^2))
# fit the model with movMF package
big_movMF <- movMF::movMF(X, 10)
clust_big_movMF <- predict(big_movMF, X)
big_means <- big_movMF$theta/sqrt(rowSums(big_movMF$theta^2))
big_weights <- big_movMF$alpha
big_concentrations <- sqrt(rowSums(big_movMF$theta^2))
# reduce to 3 components using different methods
red_hclust <- reduce_movMF_partitional(big_means, big_concentrations, big_weights, target.num=3, method="hclust")
red_medoid <- reduce_movMF_partitional(big_means, big_concentrations, big_weights, target.num=3, method="kmedoids")
# simple example
# data matrix normalized
X = as.matrix(iris[,2:4])
X = as.matrix(scale(X, center=TRUE, scale=FALSE))
X = X%*%eigen(cov(X))$vectors[,1:2] # apply PCA
X = X/sqrt(rowSums(X^2))
# fit the model with movMF package
big_movMF <- movMF::movMF(X, 10)
clust_big_movMF <- predict(big_movMF, X)
big_means <- big_movMF$theta/sqrt(rowSums(big_movMF$theta^2))
big_weights <- big_movMF$alpha
big_concentrations <- sqrt(rowSums(big_movMF$theta^2))
# reduce to 3 components using different methods
red_hclust <- reduce_movMF_partitional(big_means, big_concentrations, big_weights, target.num=3, method="hclust")
# simple example
# data matrix normalized
X = as.matrix(iris[,2:4])
X = as.matrix(scale(X, center=TRUE, scale=FALSE))
X = X%*%eigen(cov(X))$vectors[,1:2] # apply PCA
X = X/sqrt(rowSums(X^2))
# fit the model with movMF package
big_movMF <- movMF::movMF(X, 10)
clust_big_movMF <- predict(big_movMF, X)
big_means <- big_movMF$theta/sqrt(rowSums(big_movMF$theta^2))
big_weights <- big_movMF$alpha
big_concentrations <- sqrt(rowSums(big_movMF$theta^2))
# reduce to 3 components using different methods
red_hclust <- reduce_movMF_partitional(big_means, big_concentrations, big_weights, target.num=3, method="hclust")
rm(list=ls())
graphics.off()
# simple example
# data matrix normalized
X = as.matrix(iris[,2:4])
X = as.matrix(scale(X, center=TRUE, scale=FALSE))
X = X%*%eigen(cov(X))$vectors[,1:2] # apply PCA
X = X/sqrt(rowSums(X^2))
# fit the model with movMF package
big_movMF <- movMF::movMF(X, 10)
clust_big_movMF <- predict(big_movMF, X)
big_means <- big_movMF$theta/sqrt(rowSums(big_movMF$theta^2))
big_weights <- big_movMF$alpha
big_concentrations <- sqrt(rowSums(big_movMF$theta^2))
# reduce to 3 components using different methods
red_hclust <- reduce_movMF_partitional(big_means, big_concentrations, big_weights, target.num=3, method="hclust")
# simple example
# data matrix normalized
X = as.matrix(iris[,2:4])
X = as.matrix(scale(X, center=TRUE, scale=FALSE))
X = X%*%eigen(cov(X))$vectors[,1:2] # apply PCA
X = X/sqrt(rowSums(X^2))
# fit the model with movMF package
big_movMF <- movMF::movMF(X, 10)
clust_big_movMF <- predict(big_movMF, X)
big_means <- big_movMF$theta/sqrt(rowSums(big_movMF$theta^2))
big_weights <- big_movMF$alpha
big_concentrations <- sqrt(rowSums(big_movMF$theta^2))
# reduce to 3 components using different methods
red_hclust <- reduce_movMF_partitional(big_means, big_concentrations, big_weights, target.num=3, method="hclust")
# simple example
# data matrix normalized
X = as.matrix(iris[,2:4])
X = as.matrix(scale(X, center=TRUE, scale=FALSE))
X = X%*%eigen(cov(X))$vectors[,1:2] # apply PCA
X = X/sqrt(rowSums(X^2))
# fit the model with movMF package
big_movMF <- movMF::movMF(X, 10)
clust_big_movMF <- predict(big_movMF, X)
big_means <- big_movMF$theta/sqrt(rowSums(big_movMF$theta^2))
big_weights <- big_movMF$alpha
big_concentrations <- sqrt(rowSums(big_movMF$theta^2))
# reduce to 3 components using different methods
red_hclust <- reduce_movMF_partitional(big_means, big_concentrations, big_weights, target.num=3, method="hclust")
red_medoid <- reduce_movMF_partitional(big_means, big_concentrations, big_weights, target.num=3, method="kmedoids")
red_hclust
clust_hclust <- movMF_info(X, red_hclust$means, red_hclust$concentrations, red_hclust$weights)$clustering
# visualize
par(mfrow=c(1,3), pty="s")
clust_hclust <- movMF_info(X, red_hclust$means, red_hclust$concentrations, red_hclust$weights)$clustering
clust_medoid <- movMF_info(X, red_medoid$means, red_medoid$concentrations, red_medoid$weights)$clustering
# visualize
par(mfrow=c(1,3), pty="s")
plot(X, col=clust_big_movMF, pch=19, main="Original")
plot(X, col=clust_hclust, pch=19, main="Reduced (hclust)")
plot(X, col=clust_medoid, pch=19, main="Reduced (kmedoids)")
clust_hclust
clust_medoid
rm(list=ls())
graphics.off()
# simple example
# data matrix normalized
X = as.matrix(iris[,2:4])
X = as.matrix(scale(X, center=TRUE, scale=FALSE))
X = X%*%eigen(cov(X))$vectors[,1:2] # apply PCA
X = X/sqrt(rowSums(X^2))
# fit the model with movMF package
big_movMF <- movMF::movMF(X, 10)
clust_big_movMF <- predict(big_movMF, X)
convert_movMF <- movMF_convert(big_movMF)
big_means <- convert_movMF$means
big_weights <- convert_movMF$weights
big_concentrations <- convert_movMF$concentrations
# reduce to 3 components using different methods
red_hclust <- movMF_reduce_partitional(big_means, big_concentrations, big_weights, target.num=3, method="hclust")
red_medoid <- movMF_reduce_partitional(big_means, big_concentrations, big_weights, target.num=3, method="kmedoids")
clust_hclust <- movMF_info(X, red_hclust$means, red_hclust$concentrations, red_hclust$weights)$clustering
clust_medoid <- movMF_info(X, red_medoid$means, red_medoid$concentrations, red_medoid$weights)$clustering
# visualize
par(mfrow=c(1,3), pty="s")
plot(X, col=clust_big_movMF, pch=19, main="Original")
plot(X, col=clust_hclust, pch=19, main="Reduced (hclust)")
plot(X, col=clust_medoid, pch=19, main="Reduced (kmedoids)")
graphics.off()
